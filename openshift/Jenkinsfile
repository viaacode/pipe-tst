/* import shared library */
@Library('jenkins-shared-libs') _
           

pipeline {
    agent {
      node {
        // spin up a pod to run this build on
        label 'docker'
      }
    }
 

   options {
        timeout(time: 45, unit: 'MINUTES')
    }
 environment {
        ENDPOINT = sh(returnStdout: true, script: 'echo https://c100-e.eu-de.containers.cloud.ibm.com:31240').trim()
        LATEST_VERSION = sh(returnStdout: true, script: "git describe --tags|| echo latest").trim()
        shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
        BRANCH = sh(returnStdout: true, script: "git branch | grep '*' | cut -d ' ' -f2").trim()
        REGISTRY = sh(returnStdout: true, script: 'echo docker-registry-default.meemoo-596946-2bc857e5f10eb63ab790a3a1d19a696c-0001.eu-de.containers.appdomain.cloud').trim()
        OKD_REGISTRY = sh(returnStdout: true, script: 'echo docker-registry-default.apps.do-prd-okp-m0.do.viaa.be').trim()
        OKD_ENDPOINT = sh(returnStdout: true, script: 'echo https://do-prd-okp-m0.do.viaa.be:8443').trim()
        OCP_IS= sh(returnStdout: true, script: 'echo avo2-proxy').trim()
        //sh(returnStdout: true, script: 'git describe --tags')
    }
            
    stages {
           
    
        stage('select commit from version') {
            
                   steps { 
                              script {

                                sh('git show-ref --tags > tags')       
                                def tags = readFile('tags').trim()
                                def userInput = input([ message: 'Please select git tag', parameters: [[$class: 'ChoiceParameterDefinition', choices: tags, description: '', name: 'Tag']]])
                                echo ("selected tag: "+userInput)
                                def sha1 = userInput.split(' ')[0]
                                echo ("selected sha1: "+ sha1)
                               sh("git checkout "+ sha1) 
                                
                            
                               sh('''/bin/bash
                               set -e
                               login_oc.sh $ENDPOINT oc project sc-avo2
                               oc project sc-avo2
                              
                               ''')
                              
                      
                                         
                                try {
                                           sh("oc -n sc-avo2 get is ${OCP_IS} -o yaml > shas ")
                                               def shas = readFile('shas').trim()
                                              sh("echo "+shas)
                                 sh("oc -n sc-avo2 get is ${OCP_IS} -o yaml |egrep "+ sha1 )

                                 return true;
                                 } catch (error) {
                                            echo 'Tag not found in openshift'
                                           sh("exit 1")
                                            return false;
                                 }
                               
                                        

                                 }
                                
        }
                   
        }
        
       
        stage('Tag PRD') {
            steps {
                sh 'echo moo $VERSION'
            }
        }
        
    }
    post {
        always {
            cleanWs()
        }
    }

}
