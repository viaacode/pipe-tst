/* import shared library */
@Library('jenkins-shared-libs') _
           

pipeline {
    agent {
      node {
        // spin up a pod to run this build on
        label 'docker'
      }
    }
 

   options {
        timeout(time: 45, unit: 'MINUTES')
    }
 environment {
        ENDPOINT = sh(returnStdout: true, script: 'echo https://c100-e.eu-de.containers.cloud.ibm.com:31240').trim()
        LATEST_VERSION = sh(returnStdout: true, script: "git describe --tags|| echo latest").trim()
        shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
        BRANCH = sh(returnStdout: true, script: "git branch | grep '*' | cut -d ' ' -f2").trim()
        REGISTRY = sh(returnStdout: true, script: 'echo docker-registry-default.meemoo-596946-2bc857e5f10eb63ab790a3a1d19a696c-0001.eu-de.containers.appdomain.cloud').trim()
        OKD_REGISTRY = sh(returnStdout: true, script: 'echo docker-registry-default.apps.do-prd-okp-m0.do.viaa.be').trim()
        OKD_ENDPOINT = sh(returnStdout: true, script: 'echo https://do-prd-okp-m0.do.viaa.be:8443').trim()
        OCP_IS= sh(returnStdout: true, script: 'echo avo2-proxy').trim()
        //sh(returnStdout: true, script: 'git describe --tags')
    }
            
    stages {
           
    
        stage('select server/project/imgae/tag') {
            
             steps { 
                script {
                sh('''#/bin/bash
                echo $OKD_ENDPOINT > endpoints
                echo $ENDPOINT >> endpoints
                ''')       
                  def endpoints = readFile('endpoints').trim()
                  def userInputI = input([ message: 'Please select OCP installation url', parameters: [[$class: 'ChoiceParameterDefinition', choices: endpoints, description: '', name: 'ocp_installation']]])
                  def endpoint = userInputI
                  echo ("selected OCP install at: "+ endpoint)
                sh("login_oc.sh $endpoint > /dev/null 2>&1 ")
                
                sh("oc get projects| awk '{print \$1}'| tail -n+2 | egrep -v 'openshift|ibm|viaa|kube|default' > projects")
                def projects = readFile('projects').trim()
                def userInputP = input([ message: 'Please select project', parameters: [[$class: 'ChoiceParameterDefinition', choices: projects, description: '', name: 'project']]])
                def ocp_project = userInputP
                echo ("selected OCP project: "+ ocp_project)
                sh("oc project $ocp_project")
                 
                
                   
                  sh("oc get is | cut -d ' ' -f 1| tail -n+2 > images")       
                  def images = readFile('images').trim()
                  def userInput = input([ message: 'Please select imagestream', parameters: [[$class: 'ChoiceParameterDefinition', choices: images, description: '', name: 'imagestream']]])
                  def image = userInput
                  echo ("selected image: "+ image)
                  sh("echo IMAGE=$image >.env-tmp")
                 
                  sh("oc get is -o yaml $image | egrep 'tag: '| sed 's/ //g' |cut -d ':' -f 2 > tags")       
                  def tags = readFile('tags').trim()
                  def userInput2 = input([ message: 'Please select imagestreamtag ', parameters: [[$class: 'ChoiceParameterDefinition', choices: tags, description: '', name: 'imagestreamtag']]])
                  def imagetag = userInput2
                  echo ("selected imagetag: "+ imagetag)


                     
                 
                                         
          try {

           sh(returnStdout: true, script: "echo selected imagestreamtag $image:$imagetag")
           sh(returnStdout: true, script: "oc describe imagestreamtag $image:$imagetag")
           return true;
           } catch (error) {
             echo 'Tag not found in openshift'
             sh("exit 1")
             return false;
           }



           }
                                
        }
                   
        }
        
       
        stage('Tag PRD') {
            steps {
                sh 'echo moo $VERSION'
            }
        }
        
    }
    post {
        always {
            cleanWs()
        }
    }

}
